// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    Not(in=instruction[15],out=notIn15);
    Or(a=notIn15,b=instruction[5],out=loadAReg);
    And(a=instruction[15],b=instruction[4],out=loadDReg);

    Mux16(a=aluOut ,b=instruction,sel=notIn15,out=nextAReg);
    ARegister(in=nextAReg,load=loadAReg,out=outAReg,out[0..14]=addressM);
    DRegister(in=aluOut,load=loadDReg,out =outDReg);
    Mux16(a=outAReg,b=inM,sel=instruction[12],out=nextAlu);

    ExtendAlu( x=outDReg, y=nextAlu, instruction=instruction[6..14],out=outM,out=aluOut,zr=zr,ng=ng);

    And(a=instruction[0],b=instruction[15],out=out1);
    And(a=instruction[1],b=instruction[15],out=out2);
    And(a=instruction[2],b=instruction[15],out=out3);
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);
    And (a=notng,b=notzr,out=zrNg);

    And (a=zr,b=out2,out=last1);
    And (a=ng,b=out3,out=last2);
    And(a=last2,b=out3,out=last6);

    And (a=zrNg,b=out1,out=last3);


    Or (a=last1,b=last3,out=out4);
    Or(a=last2,b=out4,out=out5);
    Or (a=last2,b=last3 ,out=out6);

    PC(in=outAReg,load=out5,inc=true,reset=reset,out[0..14]=pc);

    //to writeM
    And(a=instruction[3],b=instruction[15],out=writeM);
}
